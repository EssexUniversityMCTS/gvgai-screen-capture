package controllers.ScreenCaptureAgent;

import java.util.HashMap;
import java.util.Random;

import ontology.Types;

public class QLearning {
	
	public double[][] qValues;
	//public HashMap<Experience, Integer> mapper;
	public double alpha = 0.1;
	public double gamma = 0.9;
	public double epsilon = 0.1;
	
	Experience[] experiencePool;
	private Random random = new Random();
	
	public QLearning(Experience[] exp, int actionSize)
	{
		experiencePool = exp;
		qValues = new double[experiencePool.length][actionSize];
	//	mapper = new HashMap<Experience, Integer>();
	}
	
	public void qUpdate(int index, int actionIndex,double reward)
	{
		//int index = mapper.get(experience);
		double max = 0;
		
		try
		{
			max = getMaxQValue(index);
		}
		catch(Exception e){}
		
		double prevQ = qValues[index][actionIndex];
		qValues[index][actionIndex] = alpha*(reward+gamma*max-prevQ);
		
	}
	
	public double getMaxQValue(int index)
	{
		int maxIndex = getMaxActionIndex(index);
		return qValues[index][maxIndex];
	}
	
	public int getMaxActionIndex(int index)
	{
		if(random.nextDouble()<epsilon)
		{
			return random.nextInt(qValues[0].length);
		}
		
		else
		{
			double[] actionV = qValues[index];
			int max = 0;
			for(int i=0;i<actionV.length;i++)
			{
				if(actionV[i]>actionV[max])
					max = i;
			}
						
			return max;
		}
		
	}
	
	
	
	public int getMaxActionIndexFromScreenCap(double[][] image)
	{
		boolean found = false;
		int i=0;
		try{
			
		
		for(i=0;i<experiencePool.length;i++)
		{
			double[][] im = experiencePool[i].getPrevious();
			
			boolean pass = false;
			for(int j=0;j<im.length;j++)
				for(int k=0;k<im[0].length;k++)
				{
					if(pass)
						break;
					if(im[j][k]!=image[j][k])
						pass = true;
				}
			if(!pass)
				found = true;
			
			if(found)
				break;
		}
		}catch(Exception e){}
		if(!found)
			return -1;
		else
		{
			
			int index = getMaxActionIndex(i);
			
			System.out.println("found "+i+" "+index+" "+qValues[i][index]);
			return getMaxActionIndex(i);
		}
	}
	
	public int findIndexFromPrevious(double[][] image)
	{
		{
			boolean found = false;
			int i=0;
			try{
				
			
			for(i=0;i<experiencePool.length;i++)
			{
				double[][] im = experiencePool[i].getPrevious();
				
				boolean pass = false;
				for(int j=0;j<im.length;j++)
					for(int k=0;k<im[0].length;k++)
					{
						if(pass)
							break;
						if(im[j][k]!=image[j][k])
							pass = true;
					}
				if(!pass)
					found = true;
				
				if(found)
					break;
			}
			}catch(Exception e){}
			if(!found)
				return -1;
				
			else return i;
		}
	}
	
	

}
